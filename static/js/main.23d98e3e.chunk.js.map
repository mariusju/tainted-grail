{"version":3,"sources":["locations.ts","reducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["locations","number","title","askForLocation","answer","prompt","parseInt","reducer","state","action","type","mehnirs","find","m","location","found","loc","undefined","getLocationTitle","push","dial","index","findIndex","splice","mehnir","forEach","initialState","App","useImmerReducer","JSON","parse","window","localStorage","getItem","stringify","dispatch","useEffect","setItem","useState","hoveredItem","setHoveredItem","actions","addMehnir","removeMehnir","increment","decrement","nextDay","createActions","className","map","i","isExpired","isHovered","onMouseEnter","onMouseLeave","onClick","style","fontSize","disabled","length","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23d98e3e.chunk.js","sourcesContent":["export type Location = {\n  number: number,\n  title: string\n}\n\nexport const locations:Location[] = [\n  {number: 101, title: 'Cuanacht Farmhold'},\n  {number: 102, title: 'Hunter\\'s Grove'},\n  {number: 103, title: 'Warrior Fair'},\n  {number: 104, title: 'Charred Conclave'},\n  {number: 105, title: 'Forlorn Swords'},\n]\n\nexport const getLocationTitle = (number:number):string|undefined => {\n  const found = locations.find(loc => loc.number === number)\n  return found ? found.title : undefined\n}\n","import { Dispatch } from \"react\";\nimport { getLocationTitle } from \"./locations\";\n\nconst askForLocation = (): number => {\n  const answer = prompt(\"Mehnir location?\");\n  if (answer) {\n    return parseInt(answer) || 0;\n  }\n  return 0;\n};\n\nexport const createActions = (dispatch: Dispatch<Action>) => ({\n  addMehnir: () => dispatch({ type: \"addMehnir\", location: askForLocation() }),\n  removeMehnir: (location: number): void =>\n    dispatch({ type: \"removeMehnir\", location }),\n  increment: (location: number): void =>\n    dispatch({ type: \"incrementMehnirCounter\", location }),\n  decrement: (location: number): void =>\n    dispatch({ type: \"decrementMehnirCounter\", location }),\n  nextDay: (): void => dispatch({ type: \"nextDay\" })\n});\n\nexport const reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"addMehnir\":\n      const exists = state.mehnirs.find(m => m.location === action.location);\n      if (!exists) {\n        const title = getLocationTitle(action.location);\n        if (title) {\n          state.mehnirs.push({ location: action.location, title, dial: 6 });\n        }\n      }\n      return\n    case \"removeMehnir\":\n      const index = state.mehnirs.findIndex(\n        m => m.location === action.location\n      );\n      state.mehnirs.splice(index, 1);\n      return\n    case \"incrementMehnirCounter\": {\n      const mehnir = state.mehnirs.find(m => m.location === action.location);\n      if (mehnir) {\n        mehnir.dial++;\n      }\n      return\n    }\n    case \"decrementMehnirCounter\":\n      const mehnir = state.mehnirs.find(m => m.location === action.location);\n      if (mehnir && mehnir.dial > 0) {\n        mehnir.dial--;\n      }\n      return\n    case \"nextDay\":\n      state.mehnirs.forEach(m => {\n        if (m.dial > 0) {\n          m.dial--;\n        }\n      });\n      return\n    default:\n      return\n  }\n};\n\nexport const initialState = { mehnirs: [] };\n","import React, { useState, useEffect, Dispatch } from \"react\";\nimport \"./App.css\";\nimport { reducer, initialState, createActions } from \"./reducer\";\nimport {useImmerReducer} from 'use-immer'\n\nconst App: React.FC = () => {\n  const [state, dispatch]:[State, Dispatch<Action>] = useImmerReducer(\n    reducer,\n    JSON.parse(\n      window.localStorage.getItem(\"state\") || JSON.stringify(initialState)\n    )\n  );\n\n  useEffect(() => window.localStorage.setItem(\"state\", JSON.stringify(state)), [\n    state\n  ]);\n\n  const [hoveredItem, setHoveredItem] = useState(-1);\n\n  const actions = createActions(dispatch)\n\n  return (\n    <div className=\"App\">\n      <div className=\"MehnirList\">\n        {state.mehnirs.map((m, i) => {\n          const isExpired = m.dial <= 0;\n          const isHovered = i === hoveredItem;\n          return (\n            <div\n              className=\"Mehnir\"\n              onMouseEnter={() => setHoveredItem(i)}\n              onMouseLeave={() => setHoveredItem(-1)}\n            >\n              {isHovered && (\n                <button\n                  className=\"CloseButton\"\n                  onClick={() => actions.removeMehnir(m.location)}\n                >\n                  x\n                </button>\n              )}\n              <div>\n                {m.title} {m.location}\n              </div>\n              <div\n                className={isExpired ? \"Expired\" : \"\"}\n                style={{ fontSize: 30 }}\n              >\n                {isExpired ? 0 : m.dial}\n              </div>\n              {isHovered && (\n                <div>\n                  <button onClick={() => actions.decrement(m.location)}>-</button>\n                  <button onClick={() => actions.increment(m.location)}>+</button>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      <button onClick={actions.addMehnir} disabled={state.mehnirs.length > 2}>\n        Add Mehnir\n      </button>\n\n      <button onClick={actions.nextDay}>New Day</button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}